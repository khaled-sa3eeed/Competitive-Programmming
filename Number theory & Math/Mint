template <class T>
constexpr T power(T a, int64_t b)
{
    T res = 1;
    for (; b; b /= 2, a *= a)
    {
        if (b % 2) res *= a;
    }
    return res;
}

template <int mod>
struct MInt
{
    int x;

    constexpr MInt() : x{}
    {
    }

    constexpr MInt(int64_t x) : x{norm(x % getMod())}
    {
    }

    static int Mod;

    constexpr static int getMod() { return (mod > 0 ? mod : Mod); }

    constexpr static void setMod(int Mod_) { Mod = Mod_; }

    constexpr int norm(int x) const
    {
        if (x < 0) x += getMod();
        if (x >= getMod()) x -= getMod();
        return x;
    }

    constexpr int val() const { return x; }

    explicit constexpr operator int() const { return x; }

    constexpr MInt operator-() const
    {
        MInt res;
        res.x = norm(getMod() - x);
        return res;
    }

    constexpr MInt inv() const
    {
        assert(x != 0);
        return power(*this, int64_t(getMod()) - 2);
    }

    constexpr MInt& operator*=(MInt rhs) &
    {
        x = (int)((1LL * x * rhs.x) % getMod());
        return *this;
    }

    constexpr MInt& operator+=(MInt rhs) &
    {
        x = norm(x + rhs.x);
        return *this;
    }

    constexpr MInt& operator-=(MInt rhs) &
    {
        x = norm(x - rhs.x);
        return *this;
    }

    constexpr MInt& operator/=(MInt rhs) & { return *this *= rhs.inv(); }

    friend constexpr MInt operator*(MInt lhs, MInt rhs)
    {
        MInt res = lhs;
        res *= rhs;
        return res;
    }

    friend constexpr MInt operator+(MInt lhs, MInt rhs)
    {
        MInt res = lhs;
        res += rhs;
        return res;
    }

    friend constexpr MInt operator-(MInt lhs, MInt rhs)
    {
        MInt res = lhs;
        res -= rhs;
        return res;
    }

    friend constexpr MInt operator/(MInt lhs, MInt rhs)
    {
        MInt res = lhs;
        res /= rhs;
        return res;
    }

    friend constexpr istream& operator>>(istream& is, MInt& a)
    {
        int64_t v;
        is >> v;
        a = MInt(v);
        return is;
    }

    friend constexpr ostream& operator<<(ostream& os, const MInt& a) { return os << a.val(); }
    friend constexpr bool operator==(MInt lhs, MInt rhs) { return lhs.val() == rhs.val(); }
    friend constexpr bool operator!=(MInt lhs, MInt rhs) { return lhs.val() != rhs.val(); }
    friend constexpr bool operator >(MInt lhs, MInt rhs) { return lhs.val() > rhs.val(); }
    friend constexpr bool operator <(MInt lhs, MInt rhs) { return lhs.val() < rhs.val(); }
    friend constexpr bool operator >=(MInt lhs, MInt rhs) { return lhs.val() >= rhs.val(); }
    friend constexpr bool operator <=(MInt lhs, MInt rhs) { return lhs.val() <= rhs.val(); }
};

template <>
int MInt<0>::Mod = 1;

constexpr int mod = 1000000007;
using mi = MInt<mod>;
